
<div class="container-fluid">
<div class="row">	
<div class="col-md-4">

<h2>Major Components</h2>
<p>
+ Databases and Tables</br>
___Users</br>
_______follow</br>
_______Tags?</br>
___Unassociated users?</br>
_______follow?</br>
_______Tags?</br>
___Admin</br>
___Organizations</br>
_______follow</br>
_______Tags?</br>
___Programs</br>
_______follow</br>
_______Tags?</br>
___Locations</br>
___Neighborhoods</br>
_______follow</br>
___Regions</br>
_______follow</br></br>

****** How do we handle these tools? What are the problems & goals? </br>
___Collaborations</br>
_______use an api & make it a separate application?
___Networks</br>
_______user an api & make it a sparate application?

****** Content posting </br>
___Campaigns</br>
___Posts</br>
___Messages?</br>
___Blogs?</br>
___Events/Calendar?</br>
___JotGit for realtime document editing in collaborations? </br>
__________https://github.com/jdleesmiller/jotgit </br>
___Capacity/ Openings?</br></br>

****** Core workflow </br>
___Searches</br>
___Referrals</br>
______follow?</br></br>

***** How do we handle rankings and games? What's the problem this is solving? What are the goals here? </br>
___Activity?</br>
___Trust Rankings?</br>
___Badges?</br>
****** How do we hide sub-sector complexity to make it easy and intuitive?</br>
___Cause Sub-sectors?</br>
___Identity Sub-sectors?</br>
______follow</br>
___Size-Sectors?</br>
______follow</br></br>


+ Views </br>
___design pages </br>
___add profile pictures </br>
___javascript events </br>
http://www.localytics.com/blog/2014/a-year-on-angular-on-rails-a-retrospective/</br>
http://www.cerebris.com/blog/2012/01/24/beginning-ember-js-on-rails-part-1/</br>
.........notification behaviors </br>
___transparent blur css: http://css-tricks.com/blurry-transparent-header-effect-ios7-css/ </br>
.........behavior on profile pages: </br></br>

+ Sign-up flows/ behaviors </br>
____Concept: http://notebook.ideapublic.org/2014/one-less-password/ </br>
____Quick, new user </br>
____New organization, new user </br>
________add validations to the new user join organization page so only new users can do this </br>
________fix mailers, confirmation, and state </br>
________fix the url so that it reads /connect </br>
____New programs, new user </br>
____Update organization, new user </br>
____Update programs, new user </br>
____Quick, associations, new user </br></br>
____ STATE MACHINE for user types???</br></br>

+ Searching and basic mapping behaviors </br>
____Geokit gem </br>
............ implement geocoding </br>
____Geokit-rails gem </br>
............ distance widget </br>
____Elasticsearch </br>
............ main search logged out </br>
............ main search logged in </br>
............ information type search (i.e. people, oroganizations, collaborations, etc.) </br>
____landing page </br>
____results page logged out </br>
____results page logged in </br>
____illiterate search </br></br>

+ Following behaviors </br>
**** How do we handle following neighborhoods?</br>
____follow users </br>
____follow organizations </br>
____follow collaborations </br>
____join collaborations </br>
____follow networks </br>
____join networks </br>
____follow neighborhoods </br>
____follow regions </br>
____follow Cause sub-sectors? </br>
____follow Size sub-sectors? </br>
____follow Identity sub-sectors? </br></br>

+ Messaging behaviors & rewards </br>
____message between/ among users </br>
____message user to organization </br>
____message user to collaboration </br>
____message within organization? </br>
____messages within collaborations </br>
____messages within networks </br></br>

+ Posting behaviors & rewards </br>
____organization information </br>
____program information </br>
____user information </br>
____campaigns </br>
____micro-posts </br>
____blog-posts </br>
____capacity/ openings information </br>
____events </br></br>

+ Calendar behavior </br></br>

+ Referral behavior </br></br>

+ Paymnents/ subscriptiosn behavior </br></br>

+ Transactional Email behavior </br></br>

+ Webscraping database </br></br>

+ Chron jobs </br></br>

+ Network visualization behavior </br></br>

+ Network communication behavior </br></br>

+ Search engine + mapping (based on elasticsearch, etc.)</br>
 rabbitmq ?</br>
http://dev.mikamai.com/post/85901585484/elasticsearch-on-rails-a-primer</br>
http://asquera.de/opensource/2012/11/25/elasticsearch-pre-flight-checklist/</br>
http://www.reddit.com/r/elasticsearch/comments/1xvif2/knowledge_level_required_for_elasticsearch/</br></br>

+ Reccomendation engine (based on elasticsearch) </br></br>

+ Help pages </br></br>

+ Auto login </br></br>

+ Integrate social networks/ other services </br></br>

+ Independent user </br></br>

+ Directions and other planning tools </br></br>

+ Secure headers gem? https://github.com/twitter/secureheaders </br></br>

+++ CONCEPT: QUICKBOOKS APP FOR BUSINESS PLANNING, integrate development planning & grant writing apps with Cohoot -- can charge ~ $50/mo for quickbooks app </br></br>
</p> </br></br>
</div>

<div class="col-md-4">	

<h2>Notes</h2>
<p>
<strong>Current bugs/ issues</strong></br>

</br>
<strong>Current backlog goals</strong></br>
*note--write method to calculate hours open </br>
===============</br></br>
TO INITIAL WORKING PROTOTYPE:</br>
** fix programs </br>
****** Ok, basically the form is no longer setting the organization_id... </br>
****** We're having some model association issues with the new join table? </br>
** add join table for users and programs with state to cover cases for: </br>
***** @program.team, @program.primary_contact, @program.enrollment_contact, @program.pe_contact, @program.admin, @program.team_and_admin </br>
***** add a join table for locations and programs (with state for primary loc?): </br>
***** needs to then determine user's location (through helper? in a model?) </br>
** create settings views and controllers for user, program, organization to handle all this logic </br>
** destroy followeds </br>
** add test factories (optional) </br>
** finish state for confirming staff </br>
** destroy staff relationsihps </br>
** display followed campaigns in loop</br>
** add experience and focus tags</br>
** add a background field</br>
** add profile pictures</br>
** add geolocation </br>
** add the search system</br>
</br>
===============</br>
**complete intermediate ruby section</br>
**add state to User model for associating with an organization</br>
----set the org_state to the organization's id (int)... make sure the org id is at least three digits</br>
----this will allow for passive following within an org.</br>
----follow user state to incude: semiconnected, active, mutual, passive_org, pause_org, passive_neighb, passive_collab</br>
**add state to Organization for stub/ active </br>
**implement draper gem--for object decorations... </br>
**implement a quick tutorial version AJAX/ javascript</br>
**blitz javascript in 1 day</br>
**add a little more AJAX and javascript to the application</br>
**watch image uploads, blitz Active Record Basics</br>
**begin advanced tutorial</br>
</br>
==================</br>
*start going to Ruby Meetup!!!</br>
*check/ build sign-up validations </br>
<del> *fix profile pages, and links to profile pages... </del></br>
*fix/ understand tests </br>
*continue plowing through the treehouse lessons & finish intermediate section </br>
*apply join tables to the other appropirate models </br>
*make <del> "my organization, my profile, </del> my programs" links </br>
*move on to & finish advanced treehouse lessons	 </br></br>


<strong> Join Tables </strong></br>
1) make a "follow" table with two columns: a follower column, pointing to the "subject" user, and a following column pointing to the "object" user... yes, I just made up those terms.
... My "that following a user works" in /test/model/user_test.rb is currently failing and I don't know why...WHY? It might be because of the messed up naming convention and I still don't have all my files right... also I should go back through and understand the database relationships bettter, and then update/duplication for the different models and different types of following behavior (which should have their own rules)
</p>

<p>
<strong> Writing Tests </strong></br>
Tests are written as code blocks, and have a few parts: 1) a descriptive name, 2) a verb/ action </br>

<strong> Aethetics </strong></br>
Homepage: drop the box for a single line and a blinking curser, change the submit button to a shape that fits themeatically with the logo, label it "go"... eventually as you type below will pop up suggestions mirroring your text. </br></br>
Icon design????????

<strong> How are we going to handle national organizations? </strong></br></br>
<strong> How are we going to handle national organizations with regional offices? </strong></br></br>
<strong> How are we going to handle international organizations based in the US? </strong></br></br>
<strong> How are we going to handle government organizations/ programs? </strong></br></br>
<strong> How are we going to handle highly complex organizations like hospital systems? </strong></br></br>
<strong> How are we going to handle backbone orgs/ foundations? </strong></br></br>
<strong> How are we going to handle social businesses? </strong></br></br>
<strong> How are we going to handle policy/ advocacy/ political organizations? </strong></br></br>
<strong> How are we going to handle unassociated users? </strong></br>
_______ Unassociated users should be handled like potential clients</br></br>
<Strong> What happens to the information when a user is distroyed? </strong></br>
_______ Or how does data get stored/ changed generally? </br></br>
</p>

=======STATE MACHINE===</br>
https://github.com/pluginaweek/state_machine</br></br>
State machine for user signup</br>
1) email confirmation? </br>
2) user for existing org with other confirmed users </br>
------ staff </br>
----------- staff posting on org </br>
----------- staff not posting on org </br>
------ volunteer </br>
----------- volunteer posting on org </br>
----------- volunteer not posting on org </br>
3) user for not existing org? </br>
4) unassociated user? </br>
5) organizations associated with a collaboration </br>
6) organizations associated with a network </br>
7) BLOCKING: users, organizations, collaborations, networks </br>
8) USER PRIVACY SETTINGS: (PRIVATE1, PRIVATE2, PRIVATE3) hide user name/ picture for senative jobs -- only available to certain other users </br>
9) SECRET LOCATION SETTINGS?? </br>
8) REPORTING/FLAGGING: users, organizations, collaborations, networks </br>
How does user and organizatoin state affect search results??? </br></br>
+++++++++++++++++++++++++</br>
STATE MACHINE IMPLEMENTATION
1) Define state in class (i.e. in the model) </br>
state_machine :state, initial: :pending do  </br></br>

2) Define method for doing something based on state: like "send_request_email" (still in the model)</br>
def send_request_email </br>
end </br></br>

3) In this case you generate the mailer in the terminal: bin/rails generate mailer user_notifier </br></br>

4) Set up the mailer:</br>
def friend_requested
user_friendship = UserFriendship.find(user_friendship_id) </br>
@user = user_friendship.user </br>
@friend = user.friendship.friend </br>
mail to: @friend.email, </br>
....subject: "#{@user.first_name} wants to be your friend on Treebook"</br>
end</br></br>

4) Create view: call it the same name as the method we created... so in this case "send_request_email"</br>

*in this example: generate a mailer: bin/rails generate mailer user_notifier </br>
for Mandrill integration: http://help.mandrill.com/entries/21738467-using-mandrill-s-smtp-integration-with-web-frameworks </br>
helps: https://stackoverflow.com/questions/18297248/sending-mail-with-actionmailer-and-outlook-mandrillapp-smtp-server </br>
help for HEROKU deployment: https://jibai31.wordpress.com/2014/04/18/send-transactional-emails-with-mandrill-in-rails/ </br>
more helps: http://www.alanverga.com/blog/2014/01/03/custom-rails-mailer-and-mandrill </br></br>


5) Hooking up the send request email method (back to the model)</br>
def send_request_email</br>
UserNotifier.friend_requested(id).deliver</br>
end</br>

6) Adding the state declaration (still in the model)</br>
state_machine :state, initial: :pending do </br>
	event :accept do </br>
		transition any => :accepted </br>
	end </br>
end </br></br>

7) Adding "send acceptance email" (another medthod in the model, mailer & view)</br>
# method & state in the model </br>
tate_machine :state, initial: :pending do </br>
	after_transition on: :accept, do: :send_acceptance_email</br></br>

	event :accept do </br>
		transition any => :accepted </br>
	end </br></br>

def send_acceptance_email</br>
UserNotifier.friend_request_accepted(id).deliver</br>
end</br></br>

# [method/action/thing] created in the mailer
def friend_request_accepted </br>
user_friendship = UserFriendship.find(user_friendship_id)
@user = user_friendship.user </br>
@friend = user.friendship.friend </br>
mail to: @user.email, 
....subject: "#{@friend.first_name} accepted your friendship!!" </br>
end </br> </br>

8) HOLY GEEZ!!! creating a class method (rather than an instance method) and new join table relationships based on state at 9:00 into the video</br>
instance methods use an instance of a class, whereas a class method can be used with just the class name </br></br> instance methods operate on an object and has access to its instance variables, while a class method operates on a class as a whole and has no access to a particular instance's variables (unless you pass the instance in as a parameter).</br></br>
http://teamtreehouse.com/library/building-social-features-in-ruby-on-rails-2/adding-state/setting-up-the-state-machine-2 </br></br>
http://www.railstips.org/blog/archives/2009/05/11/class-and-instance-methods-in-ruby/ </br></br>
--this gets crazy with creating join table relationships that account for state </br>
--then they create another follow_user for the followed with a "class method" </br>
I think I need to do this to 1) display all of the followers of a particular user </br>
and 2) allow a user to block another user from following them </br>


</div>
</div>